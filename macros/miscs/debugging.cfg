[gcode_macro SEARCH_VARS]
description: Search for variables in the "printer" object from Klipper
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

# This macro will allow you to type search_vars s={some word} from the terminal and
# it will respond with all of the matching items in the printer Object.
# Say I wanted to know what the name and path of for the value of the currently loaded bed
# mesh. I could do type search_vars s=profile in my terminal and it will respond with 
# any items containing the word ‘profile’.
# 
#   $ SEARCH_VARS s="profile"
#   // printer.bed_mesh.profile_name : default
# 
[gcode_macro SEARCH_VARS2]
# Search like 'SEARCH_VARS s="profile"'
gcode:
    {% if not params.S %}
        {action_respond_info("hmm.. try 'SEARCH_VARS s=\"profile\"'")}
    {% else %}
        {% set resultcount = namespace(total=0) %}
        {% set search = params.S|lower %}
        {% set ns = namespace() %}
        {% for item in printer  %}
            {% if ' ' in item %}
                {% set ns.path = ['printer', "['%s']" % (item), ''] %}
            {% else %}
                {% set ns.path = ['printer.', item, ''] %}   
            {% endif %} 
    
            {% if search in ns.path|lower %}
                { action_respond_info(ns.path|join) }
                {% set resultcount.total = 1 + resultcount.total %}
            {% endif %} 
    
            {% if printer[item].items() %}
                {% for childkey, child in printer[item].items() recursive %}
                    {% set ns.path = ns.path[:loop.depth|int + 1] %}
    
                    {% if ' ' in childkey %}
                        {% set null = ns.path.append("['%s']" % (childkey)) %}
                    {% else %}
                        {% set null = ns.path.append(".%s" % (childkey)) %}
                    {% endif %} 
    
                    {% if child is mapping  %}
                        { loop(child.items()) }
                    {% else %}
                        {% if search in ns.path|lower %}
                            { action_respond_info("%s : %s" % (ns.path|join, child)) }
                            {% set resultcount.total = 1 + resultcount.total %}
                        {% endif %} 
                    {% endif %} 
                    
                {% endfor %}
            {% endif %} 
        {% endfor %}
        {% if resultcount.total >= 1 %}
            {action_respond_info("found \"" + params.S + "\" " + resultcount.total|string +" times.")}
        {% else %}
            {action_respond_info("\"" + params.S + "\" not found.")}
        {% endif %} 
        {% set resultcount.total = 0|int %}
    {% endif %}

#####################################################################
#  Macros to debug the printer variable
#####################################################################
# Use:
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                         'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                'y' : [min.y,(min.y-probe_offset.y)]|max},
                       'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
                        Min X:%7.1f, Y:%7.1f, Z:%7.1f
                        Max X:%7.1f, Y:%7.1f, Z:%7.1f
                        Probe Area Limits:
                        Min X:%7.1f, Y:%7.1f
                        Max X:%7.1f, Y:%7.1f" % 
    (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

#####################################################################
#  Macros needed for several debug activities
#####################################################################

## Use:
##   - DUMP_CONFIG S='printer'
[gcode_macro DUMP_CONFIG]
description: Debug: Print the selected entrie of the printer config object
gcode:
    {% if 'S' in params %}
        {% set parameters = [] %}
        {% for name1 in printer.configfile.config %}
            {% if name1 is in [params.S] %}
                {% for name2 in printer.configfile.config[name1]|sort %}
                    {% set parameters = parameters.append("printer.configfile.config['%s'].%s = %s" % (name1, name2, printer.configfile.config[name1][name2])) %}
                {% endfor %}
            {% endif %}
        {% endfor %}
        action_respond_info(parameters|join("\n"))}
    {% else %}
        {action_respond_info("WARNING: parameter S needed call e.g. DUMP_CONFIG S='printer'")}
    {% endif %}

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for name1 in printer.configfile.warnings %}
        {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}

## Use:
##   - DUMP_SETTINGS S='printer'
[gcode_macro DUMP_SETTINGS]
description: Debug: Print the selected entrie of the printer settings object
gcode:
    {% if 'S' in params %}
        {% set parameters = [] %}
        {% for name1 in printer.configfile.settings %}
            {% if name1 is in [params.S] %}
                {% for name2 in printer.configfile.settings[name1]|sort %}
                    {% set parameters = parameters.append("printer.configfile.settings['%s'].%s = %s" % (name1, name2, printer.configfile.settings[name1][name2])) %}
                {% endfor %}
            {% endif %}
        {% endfor %}
        {action_respond_info(parameters|join("\n"))}
    {% else %}
        {action_respond_info("WARNING: parameter S needed call e.g. DUMP_SETTINGS S='printer'")}
    {% endif %}

#####################################################################
#  Macros needed for several debug activities
#####################################################################